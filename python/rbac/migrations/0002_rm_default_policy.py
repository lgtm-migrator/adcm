# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2 on 2022-02-14 09:29

from django.db import migrations


def remove_permissions(policy, policy_model):
    for pp in policy.model_perm.all():
        if policy_model.objects.filter(user=pp.user, group=pp.group, model_perm__permission=pp.permission).count() > 1:
            continue
        if pp.user:
            pp.user.user_permissions.remove(pp.permission)
        if pp.group:
            pp.group.permissions.remove(pp.permission)
        pp.delete()
    for pp in policy.user_object_perm.all():
        if policy_model.objects.filter(user=pp.user, user_object_perm=pp).count() > 1:
            continue
        pp.delete()
    for pp in policy.group_object_perm.all():
        if policy_model.objects.filter(group=pp.group, group_object_perm=pp).count() > 1:
            continue
        pp.delete()


def remove_default_policy(apps, schema_editor):
    Policy = apps.get_model('rbac', 'Policy')
    policy = Policy.objects.filter(name='default', built_in=True).first()
    if policy:
        # Default django model delete() method is used here,
        # so Policy.remove_permissions() was copied as-is
        remove_permissions(policy, Policy)
        policy.delete()

    Role = apps.get_model('rbac', 'Role')
    Role.objects.filter(name='Base role', type='hidden').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('rbac', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(remove_default_policy),
    ]
