# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 3.2.9 on 2022-01-28 13:12

import django.contrib.auth.models
import django.db.models.deletion
from django.db import connection, migrations, models

import rbac.models


def upgrade_users(apps, schema_editor):
    query = '''
            INSERT INTO "rbac_user" ("user_ptr_id", "profile", "built_in")
            SELECT au.id, coalesce(up.profile, '{}'), FALSE 
                FROM "auth_user" au
                LEFT JOIN "rbac_user" ru ON ru.user_ptr_id = au.id
                LEFT JOIN "cm_userprofile" up ON au.username = up.login
                WHERE ru.user_ptr_id IS NULL
        '''
    with connection.cursor() as cursor:
        cursor.execute(query)


def update_status_user(apps, schema_editor):
    User = apps.get_model('rbac', 'User')
    status_user = User.objects.filter(username='status').first()
    if status_user:
        status_user.built_in = True
        status_user.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('cm', '0083_add_product_category'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('guardian', '0002_generic_permissions_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                (
                    'group_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='auth.group',
                    ),
                ),
                ('description', models.CharField(max_length=255, null=True)),
                ('built_in', models.BooleanField(default=False)),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='RoleMigration',
            fields=[
                ('version', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                (
                    'user_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='auth.user',
                    ),
                ),
                ('profile', models.JSONField(default=str)),
                ('built_in', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RunPython(upgrade_users),
        migrations.RunPython(update_status_user),
        migrations.CreateModel(
            name='Role',
            fields=[
                (
                    'id',
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
                ),
                ('name', models.CharField(max_length=160)),
                ('description', models.TextField(blank=True)),
                ('display_name', models.CharField(default='', max_length=160)),
                ('module_name', models.CharField(max_length=32)),
                ('class_name', models.CharField(max_length=32)),
                ('init_params', models.JSONField(default=dict)),
                ('built_in', models.BooleanField(default=True)),
                (
                    'type',
                    models.CharField(
                        choices=[('business', 'business'), ('role', 'role'), ('hidden', 'hidden')],
                        default='role',
                        max_length=32,
                    ),
                ),
                ('any_category', models.BooleanField(default=False)),
                (
                    'parametrized_by_type',
                    models.JSONField(default=list, validators=[rbac.models.validate_object_type]),
                ),
                (
                    'bundle',
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='cm.bundle',
                    ),
                ),
                ('category', models.ManyToManyField(to='cm.ProductCategory')),
                ('child', models.ManyToManyField(blank=True, to='rbac.Role')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.Permission')),
            ],
        ),
        migrations.CreateModel(
            name='PolicyPermission',
            fields=[
                (
                    'id',
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
                ),
                (
                    'group',
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='rbac.group',
                    ),
                ),
                (
                    'permission',
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='auth.permission',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='rbac.user',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='PolicyObject',
            fields=[
                (
                    'id',
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
                ),
                ('object_id', models.PositiveIntegerField()),
                (
                    'content_type',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                (
                    'id',
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
                ),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('built_in', models.BooleanField(default=True)),
                ('group', models.ManyToManyField(blank=True, to='rbac.Group')),
                (
                    'group_object_perm',
                    models.ManyToManyField(blank=True, to='guardian.GroupObjectPermission'),
                ),
                ('model_perm', models.ManyToManyField(blank=True, to='rbac.PolicyPermission')),
                ('object', models.ManyToManyField(blank=True, to='rbac.PolicyObject')),
                (
                    'role',
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.role'),
                ),
                ('user', models.ManyToManyField(blank=True, to='rbac.User')),
                (
                    'user_object_perm',
                    models.ManyToManyField(blank=True, to='guardian.UserObjectPermission'),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['name', 'display_name'], name='rbac_role_name_b010fa_idx'),
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX auth_user_name_b010fa_idx
            ON auth_user (username, first_name, last_name, email);
        '''
        ),
        migrations.RunSQL(
            '''
            CREATE INDEX auth_group_name_b010fa_idx
            ON auth_group (name);
        '''
        ),
        migrations.AddConstraint(
            model_name='role',
            constraint=models.UniqueConstraint(fields=('name', 'built_in'), name='unique_name'),
        ),
        migrations.AddConstraint(
            model_name='role',
            constraint=models.UniqueConstraint(fields=('display_name', 'built_in'), name='unique_display_name'),
        ),
        migrations.AddConstraint(
            model_name='policyobject',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_id'), name='unique_policy_object'),
        ),
    ]
